{% extends "layout.html.twig" %}

{% block title %}
  Référencer un espace de coworking
{% endblock %}

{% block meta %}
	<meta name="robots" content="noindex,nofollow" />
{% endblock %}

{% block stylesheets %}
	
{% endblock %}

{% block body %}
{% form_theme form 'bootstrap_3_horizontal_layout.html.twig' %}
<div class="container-fluid">
	<div class="row">
		<div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2">
			<h1>Référencez votre espace</h1>
			<br>
			{{ form_start(form) }}
			{{ form_errors(form) }}
			<h2>Identité de votre espace</h2>
				{{form_row(form.name)}}
				<div class="form-group">
					<label class="col-sm-2 control-label required" for="autocomplete">Adresse *</label>
					<div class="col-sm-10">
						<input id="autocomplete" onFocus="geolocate()" type="text" autocomplete="off" class="form-control"></input>
					</div>
				</div>
				
				{{form_row(form.street)}}
				{{form_row(form.postCode, {'attr': {'hidden': true}})}}
				{{form_row(form.city, {'attr': {'hidden': true}})}}
				{{form_row(form.country, {'attr': {'hidden': true}})}}
				{{form_row(form.isAlwaysOpen)}}
				{{form_row(form.timetable)}}

			<h2>L'équipe</h2>
				{{form_row(form.teamMember)}}
				<div class="row text-center">
					<a href="#" id="add_teamMember" class="btn btn-default">Ajouter un membre</a>
				</div>
			<h2>Votre présence sur Internet</h2>
				{{form_row(form.website)}}
				{{form_row(form.facebookLink)}}
				{{form_row(form.twitterLink)}}
				{{form_row(form.instagramLink)}}
			<h2>Définissez votre offre</h2>
				{{form_row(form.category)}}
				{{form_row(form.offer)}}
				{{form_row(form.firstBookingFree)}}
			<h2>Vos services</h2>
				{{form_row(form.amenitiesDesc)}}
				{{form_row(form.workspaceHasAmenitiesList)}}
				<div class="row text-center">
					<a href="#" id="add_amenity" class="btn btn-default">Ajouter un service</a>
				</div>
			<h2>Les espaces à louer</h2>
				{{form_row(form.workspaceHasOfficeList)}}
				<div class="row text-center">
					<a href="#" id="add_office" class="btn btn-default">Ajouter un bureau</a>
				</div>
			<h2>Les photos</h2>
				{{form_row(form.pictures)}}
				<div class="row text-center">
					<a href="#" id="add_picture" class="btn btn-default">Ajouter une photo</a>
				</div>
			{# Désactive la validation HTML et force la validation côté serveur #}
			{{form_row(form.Enregistrer, {'attr': {'formnovalidate': 'formnovalidate'}})}}
			{{ form_rest(form) }}
			{{ form_end(form) }}
		</div>
	</div>
</div>

{% endblock body %}

{% block javascripts %}

	{# Gestion de la saisie de l'adrese via API google #}
    <script type="text/javascript">
    	var placeSearch, autocomplete;

      	initAutocomplete();

	    function initAutocomplete() {
	        // Create the autocomplete object, restricting the search to geographical location types.
	        autocomplete = new google.maps.places.Autocomplete(
	            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
	            {types: ['geocode']});

	        // When the user selects an address from the dropdown, populate the address fields in the form.
	        autocomplete.addListener('place_changed', fillInAddress);
	      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        $('#create_ws_form_street').val(place.address_components[0]['long_name'] + ' ' + place.address_components[1]['long_name']);
        $('#create_ws_form_postCode').val(place.address_components[6]['long_name']);
        $('#create_ws_form_city').val(place.address_components[2]['long_name']);
        $("#create_ws_form_country option").filter(function() {
		    return this.text == place.address_components[5]['long_name']; 
		}).attr('selected', true);

      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>

	{# Gestion des sous formulaires pour les relations ManyToMany #}
	<script type="text/javascript">

  	$(document).ready(function() {
  	
  	manageSubForm($('div#create_ws_form_workspaceHasAmenitiesList'), $('#add_amenity'));
 	manageSubForm($('div#create_ws_form_workspaceHasOfficeList'), $('#add_office'));
 	manageSubForm($('div#create_ws_form_teamMember'), $('#add_teamMember'));
 	manageSubForm($('div#create_ws_form_pictures'), $('#add_picture'));


    function manageSubForm($container, $btn_add){
	    // On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
	    var index = $container.find(':input').length;

	    // On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
	    $($btn_add).click(function(e) {
	      addItem($container);
	      e.preventDefault(); // évite qu'un # apparaisse dans l'URL
	      return false;
	    });

	    // On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
//On n'ajoute pas d'item par défaut sinon on peut pas faire de save intermédiaire car la relation est required
	    // if (index == 0) {
	    //   addItem($container);
	    // } else {
	    //   // S'il existe déjà des catégories, on ajoute un lien de suppression pour chacune d'entre elles
	    //   $container.children('div').each(function() {
	    //     addDeleteLink($(this));
	    //   });
	    // }

	    // La fonction qui ajoute un formulaire CategoryType
	    function addItem($container) {
	      // Dans le contenu de l'attribut « data-prototype », on remplace :
	      // - le texte "__name__label__" qu'il contient par le label du champ
	      // - le texte "__name__" qu'il contient par le numéro du champ
	      var template = $container.attr('data-prototype')
	        .replace(/__name__label__/g, 'Item n°' + (index+1))
	        .replace(/__name__/g,        index)
	      ;

	      // On crée un objet jquery qui contient ce template
	      var $prototype = $(template);

	      // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
	      addDeleteLink($prototype);

	      // On ajoute le prototype modifié à la fin de la balise <div>
	      $container.append($prototype);

	      // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
	      index++;
	    }
    }


    // La fonction qui ajoute un lien de suppression
    function addDeleteLink($prototype) {
      var $deleteLink = $('<a href="#" class="btn btn-danger">Supprimer</a>');
      $prototype.append($deleteLink);

      // Ajout du listener sur le clic du lien pour effectivement supprimer la catégorie
      $deleteLink.click(function(e) {
        $prototype.remove();
        e.preventDefault(); // évite qu'un # apparaisse dans l'URL
        return false;
      });
    }
  });
</script>
{% endblock javascripts %}
