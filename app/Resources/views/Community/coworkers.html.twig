{% extends "Community/layout.html.twig" %}

{% block title %}
  Communauté - coworkers
{% endblock %}

{% block content %}
<h1>Les coworkers</h1>

	<div class="row" id="filtersBar">
		<div class="row">
	        <div class="col-lg-9 searchBox">
		    	<div id="search-input"></div>
		    	<i class="fa fa-search" aria-hidden="true"></i>
		    	<span>By <img src="{{ asset('images/icons/')}}algolia.png" alt="Algolia"></span>
		    	<div id="stats"></div>
	        </div>
	        <div class="col-lg-3 sortBox">
		    	<div id="sort-by-wrapper">
		    		<i class="fa fa-sort-amount-asc" aria-hidden="true"></i>
		    		<span id="sort-by"></span>
		    	</div>
		    	<button id="expandFilterBar"><i class="fa fa-filter" aria-hidden="true"></i> Plus de filtres</button>
	        </div>
	    </div>
		<div class="row" id="filtersBarExpanded" style="display:none;">
			<div class="col-lg-3">
				<h3>Job</h3>
		    	<div id="job" class="facet"></div>
			</div>	
			<div class="col-lg-3">
				<h3>Compétence</h3>
		    	<div id="skills" class="facet"></div>
	    	</div>
			<div class="col-lg-3">
				<h3>Centre d'intérêt</h3>
		    	<div id="hobbies" class="facet"></div>
	    	</div>
			<div class="col-lg-3">
		    	<h3>Réseau</h3>
	    	</div>
		</div>

	</div>
	<div class="row">
	    <div id="hits" class="coworkers"></div>
	    <div id="pagination"></div>
	</div>

{% endblock content %}

{% block javascripts %}
<script>
	// Documentation : https://www.algolia.com/doc/guides/search/instant-search/

	var search = instantsearch({
	  appId: "{{ algolia.application_id }}",
	  apiKey: "{{ algolia.search_api_key }}", // search only API key, no ADMIN key
	  indexName: "{{ algolia.index_name }}",
	  urlSync: true
	});

	search.addWidget(
	  instantsearch.widgets.searchBox({
	    container: '#search-input',
	    placeholder: 'Chercher un coworker (exemple : freelance PHP Lille)'
	  })
	);
	
	search.addWidget(
	  instantsearch.widgets.hits({
	    container: '#hits',
	    hitsPerPage: 10,
	    templates: {
	      item: function(data) {
	      	console.log(data);
	      	
	      	var skills = getTab('listSkills', data);
	      	var hobbies = getTab('listHobbies', data);
	      	var wishes = getTab('listWishes', data);
	      	var firstname = '';
	      	if(typeof data._highlightResult.firstname !== 'undefined'){
	        		firstname = data._highlightResult.firstname.value
	        	}else if(data.firstname !== null){
	        		firstname = data.firstname
	        	}else{
	        		firstname = ''};
	      	var name = '';
	      	if(typeof data._highlightResult.name !== 'undefined'){
	        		name = data._highlightResult.name.value
	        	}else if(data.name !== null){
	        		name = data.name
	        	}else{
	        		name = ''};
	      	var job = '';
	      	if(typeof data._highlightResult.job !== 'undefined'){
	        		job = data._highlightResult.job.value
	        	}else if(data.job !== null){
	        		job = data.job
	        	}else{
	        		job = ''};
	        var picture = '';
	        if(data.urlProfilePicture !== null){
	        		picture = data.urlProfilePicture
	        	}else{
	        		picture = 'avatar.png'};
	        var bio = '';
	        if(data.description !== null){
	        		bio = data.description
	        	}else{
	        		bio = ''};
	        var city = '';
	      	if(typeof data._highlightResult.city !== 'undefined'){
	        		city = data._highlightResult.city.value
	        	}else if(data.city !== null){
	        		city = data.city
	        	}else{
	        		city = ''};

	        return '<div class="coworker">' + 
						'<div class="photo" style="background-image:url(\'{{ asset("images/ProfilePictures/")}}' + picture + '\');' +
						    'width:200px; ' +
						    'height:200px; ' +
						    'background-position:center;' +
						    'background-size: cover;' +
						    'margin: 0;">&nbsp;</div>' +
						'<span>' + firstname + ' ' + name + '</span>' +
						'<div class="info">' +
							'<i class="fa fa-briefcase" aria-hidden="true"></i> ' + job + '<br>' +
							'<i class="fa fa-thumb-tack" aria-hidden="true"></i> ' + skills + '<br>' + 
							'<i class="fa fa-users" aria-hidden="true"></i> ' + wishes + '<br>' +
							'<i class="fa fa-home" aria-hidden="true"></i> ' + city + '<br>' +
							'<br>' +
							'<p class="bio">' + TextAbstract(bio, 200) + '</p>' +
						'</div>' +
					'</div>'
	      },
	      empty: function(data) {
	      	console.log(data);
	        return '<p>Désolé ! Aucun coworker trouvé pour la recherche <em>' + data.query + '</em>.</p>'
	      }
	    }
	  })
	);

	search.addWidget(
	  instantsearch.widgets.stats({
	    container: '#stats',
	    templates: {
	      body: function(data) {
	        return '<div>' + data.nbHits + ' coworkers trouvés.</div>'
	      }
	    }
	  })
	);

	search.addWidget(
	  instantsearch.widgets.sortBySelector({
	    container: '#sort-by',
	    autoHideContainer: true, //automatically hide the widget when there are no results to display
	    indices: [{
	      name: search.indexName, label: 'Fill rate'
	    }, {
	      name: search.indexName + '_sort_firstname_asc', label: 'Prénom Asc'
	    }]
	  })
	);

	search.addWidget(
	  instantsearch.widgets.pagination({
	    container: '#pagination'
	  })
	);

	search.addWidget(
	  instantsearch.widgets.refinementList({
	    container: '#skills',
	    attributeName: 'listSkills.name',
	    limit: 10,
	    sortBy: ['isRefined', 'count:desc', 'name:asc'],
	    operator: 'or'
	  })
	);
	search.addWidget(
	  instantsearch.widgets.refinementList({
	    container: '#hobbies',
	    attributeName: 'listHobbies.name',
	    limit: 10,
	    sortBy: ['isRefined', 'count:desc', 'name:asc'],
	    operator: 'or'
	    // templates: {
	    //   header: '<h5>Centre d\'intérêt</h5>'
	    // }
	  })
	);
	search.addWidget(
	  instantsearch.widgets.refinementList({
	    container: '#job',
	    attributeName: 'job',
	    limit: 10,
	    sortBy: ['isRefined', 'count:desc', 'name:asc'],
	    operator: 'or'
	  })
	);

	search.start();

	$('#expandFilterBar').on('click', function(){
		if($('#filtersBarExpanded').css('display') == 'none')
			$('#filtersBarExpanded').show();
		else
			$('#filtersBarExpanded').hide();
	});


	function getTab(element, data)
	{
		if(typeof data._highlightResult[element]  !== 'undefined')
		{
			return getList(data._highlightResult[element]);
		}else if(typeof data[element]  !== 'undefined')
		{
			return getList(data[element]);
		}else{
			return '';
		}
	}

	function getList(tab) 
	{
		var list = '';
		for ( var i = 0, length = tab.length; i < length; i++ )
	        {
	        	list = list + tab[i].name.value + ', '
	        }
	  	return list;
	}

	function TextAbstract(text, length) {
    if (text == null) {
        return "";
    }
    if (text.length <= length) {
        return text;
    }
	    text = text.substring(0, length);
	    last = text.lastIndexOf(" ");
	    text = text.substring(0, last);
	    return text + "...";
	}

</script>
{% endblock javascripts %}
