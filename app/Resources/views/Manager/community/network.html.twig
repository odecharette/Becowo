{% extends 'manager/manager-layout.html.twig' %}

{% block page %}

<div class="row">
	<div class="col-lg-12">
		<h1>Les réseaux de coworkers</h1>
		<hr>
	</div>
</div>


<table class="table">
	<thead>
		<tr>
			<th>Nom du réseau</th>
			<th>Admin</th>
			<th>Coworkers</th>
		</tr>
	</thead>
	<tbody>
		{% for n in network %}
			<tr>
			 	<td>{{n.name}}</td>
			 	<td><a href="{{ path('becowo_member_community_coworker', {city:n.adminMember.city|replace({'-':' '})|default('ville') , job:n.adminMember.job|replace({'-':' ', '/':' '})|default('job') ,id: n.adminMember.id}) }}" target="_blank">{{n.adminMember.firstname}} {{n.adminMember.name}}</a></td>
				<td><a href="{{ path('becowo_manager_community', {networkId: n.id, id: workspace.id}) }}">Liste des coworkers</a></td>

			</tr>

		{% endfor %}
	</tbody>
</table> 

{#########################################################################################################}
<div class="row">
    <div class="col-lg-4">
    	<div class="read-network">
    		<button type="button" class="btn btn-primary" onclick="goWrite('network')">Créer un réseau</button>
    	</div>
    	<div class="write-network">		
			{{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
			{{ form_errors(form) }}
			{{ form_rest(form) }}
			<button type="submit" class="btn btn-success btn-xs fa fa-check"></button>
			{{ form_end(form) }}
			<button type="button" class="btn btn-danger btn-xs fa fa-times" onclick="goRead('network')"></button> 
		</div>
	</div>
</div>

{#########################################################################################################}

{% if app.request.get('networkId') > 0 %}
	<br>
	<h2>Les membres de la communauté {{currentNetwork.name}} ({{members|length}})</h2>
<br>
{#########################################################################################################}
<div class="row">
    <div class="col-lg-4">
    	<div class="read-member">
    		<button type="button" class="btn btn-primary" onclick="goWrite('member')"><i class="fa fa-plus" aria-hidden="true"></i> Ajouter un membre</button>
    	</div>
    	<div class="write-member">
			{{ form_start(formMember, {'attr': {'class': 'form-horizontal'}}) }}
			{{ form_errors(formMember) }}
			{{ form_rest(formMember) }}
			<button type="submit" class="btn btn-success btn-xs fa fa-check"></button>
			{{ form_end(formMember) }}
			<button type="button" class="btn btn-danger btn-xs fa fa-times" onclick="goRead('member')"></button> 
		</div>
	</div>
</div>
{#########################################################################################################}
<br>
	{% if members|length == 0 %}
		<p>Aucun membre n'appartient à cette communauté pour le moment</p>
	{% else %}
	<table class="table">
	<thead>
		<tr>
			<th>Photo</th>
			<th>Prénom</th>
			<th>Nom</th>
			<th>Date d'inscription</th>
			<th>Voir son profil</th>
		</tr>
	</thead>
	<tbody>

	{% for member in members %}
		<tr>
			{% if member.urlProfilePicture != '' %}
				<td><img src="{{ asset('images/ProfilePictures/') }}{{member.urlProfilePicture}}" alt="{{member.name}}" width="50px" height="50px"></td>
				{% else %}
					<td></td>
				{% endif %}
			<td>{{member.firstname}}</td>
		 	<td>{{member.name}}</td>
		 	<td>{{member.createdAt|date('d/m/Y')}}</td>
		 	<td><a href="{{ path('becowo_member_community_coworker', {city:member.city|replace({'-':' '})|default('ville') , job:member.job|replace({'-':' ', '/':' '})|default('job') ,id: member.id}) }}" target="_blank"><i class="fa fa-external-link" aria-hidden="true"></i></a></td>
		</tr>

	{% endfor %}
	</tbody>
	</table> 
	{% endif %}
{% endif %}
{% endblock %}

{% block javascripts %}
	<script>

	goRead("network");
	goRead("member");

	// #1 - Search configuration - To replace with your own
var ALGOLIA_APPID = '{{ algolia.application_id }}';
var ALGOLIA_SEARCH_APIKEY = '{{ algolia.search_api_key }}';
var ALGOLIA_INDEX_NAME = '{{ algolia.index_name }}';
var NB_RESULTS_DISPLAYED = 5;
// #2- Algolia API Client Initialization
var algoliaClient = new algoliasearch(ALGOLIA_APPID, ALGOLIA_SEARCH_APIKEY); 
var index = algoliaClient.initIndex(ALGOLIA_INDEX_NAME);
var lastQuery = '';
$('#community_network_has_member_member').textcomplete([
  {
    // #3 - Regular expression used to trigger the autocomplete dropdown
    match: /(^|\s)(\w*(?:\s*\w*))$/,
    // #4 - Function called at every new keystroke
    search: function(query, callback) {
      lastQuery = query;
      index.search(lastQuery, { hitsPerPage: NB_RESULTS_DISPLAYED })
        .then(function searchSuccess(content) {
          if (content.query === lastQuery) {
            callback(content.hits);
          }
        })
        .catch(function searchFailure(err) {
          console.error(err);
        });
    },
    // #5 - Template used to display each result obtained by the Algolia API
    template: function (hit) {
    	if(typeof hit._highlightResult !== 'undefined' && typeof hit._highlightResult.firstname !== 'undefined'){
    		firstname = hit._highlightResult.firstname.value
    	}else{
    		firstname = ''};
    	if(typeof hit._highlightResult !== 'undefined' && typeof hit._highlightResult.name !== 'undefined'){
    		name = hit._highlightResult.name.value
    	}else{
    		name = ''};
    	if(typeof hit._highlightResult !== 'undefined' && typeof hit._highlightResult.city !== 'undefined'){
    		city = hit._highlightResult.city.value
    	}else{
    		city = ''};
      // Returns the highlighted version of the name attribute
      return firstname + ' ' + name + ', ' + city;
    },
    // #6 - Template used to display the selected result in the textarea
    replace: function (hit) {
    	if(hit.firstname != null){firstname = hit.firstname.trim();}
    	if(hit.name != null){name = hit.name.trim();}
    	if(hit.city != null){city = hit.city.trim();}

      return firstname + ',' + name + ',' + city;
    }
  }
]);
	</script>
{% endblock %}
